task_default GPU,OMP,CPU;
region_default GPU FBMEM;
region_default OMP SOCKMEM,SYSMEM;
region_default CPU SOCKMEM,SYSMEM;

# task_1 arg_1 --> SOCKMEM

DefaultLayoutConstraint {Mem}* row_major/column_major SOA ()/AOS (LEGION_DIM_F) [>=/=/</...] 128 Compact=True? (sparse)
OrderConstrant task_1 {arg_1}* {MEM}* row_major (reverse)
rderConstrant SOCKMEM row_major (reverse)


// may run into backpresssure problem later

# ZCMEM,FBMEM,SYSMEM,RDMEM

m1 = Machine(OMP);
# m2 = m1.merge(0, 1);
# m2_size0 = m2.size[0];
# print("m2.size: {}", m2_size0);

# def block_dim(IPoint x, ISpace y, MSpace z, int dim)
# {
#     return x[dim] * z.size[dim] / y.size[dim];
# }

# def block(IPoint x, ISpace y, MSpace z)
# {
#     a = block_dim(x, y, z, 0);
#     b = block_dim(x, y, z, 1);
#     print("block {},{}", a, b);
#     return (a, b);
# }

def taco(IPoint x, ISpace y, MSpace z)
{
    return (x[0] * z.size[0] / y.size[0], x[1] * z.size[1] / y.size[1]);
}

# # IndexTaskMap taco_fill m1 block;
IndexTaskMap task_1 m1 taco;
# # All the IndexLauncher over 2d index launch space should be here
IndexTaskMap task_2 m1 taco;
IndexTaskMap task_3 m1 taco;
IndexTaskMap task_5 m1 taco;
IndexTaskMap task_7 m1 taco;

IndexTaskMap_Default m1 taco;
