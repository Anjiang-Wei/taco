Task * GPU,OMP,CPU;

Region * * * SOCKMEM,SYSMEM;
Region * * GPU FBMEM,ZCMEM;

# Layout taskname regionname memory AOS F_order;
Layout * * * SOA C_order; # Align==128 Compact

# InstanceLimit task_1 OMP 10; # controlled by command line in TacoMapper

CollectMemory * *;

m4 = Machine(GPU); # nodes * 4
m5 = m4.balance_split(0, 2); # node1 * node2 * 4
m5_ = m5.swap(0, 1);

def block_primitive(IPoint x, ISpace y, MSpace z, int dim1, int dim2)
{
    return x[dim1] * z.size[dim2] / y.size[dim1];
}

def cyclic_primitive(IPoint x, ISpace y, MSpace z, int dim1, int dim2)
{
    return x[dim1] % z.size[dim2];
}

def block_zero(IPoint x, ISpace y, MSpace z)
{
    a = block_primitive(x, y, z, 0, 0);
    b = 0;
    return (a, b);
}

def cyclic_zero(IPoint x, ISpace y, MSpace z)
{
    a = cyclic_primitive(x, y, z, 0, 0);
    b = 0;
    return (a, b);
}

def block2_zero(IPoint x, ISpace y, MSpace z)
{
    a = block_primitive(x, y, z, 1, 0);
    b = 0;
    return (a, b);
}

def block_block_zero(IPoint x, ISpace y, MSpace z)
{
    a = block_primitive(x, y, z, 0, 0);
    b = block_primitive(x, y, z, 1, 1);
    c = 0;
    return (a, b, c);
}

def block_block02_zero(IPoint x, ISpace y, MSpace z)
{
    a = block_primitive(x, y, z, 0, 0);
    b = block_primitive(x, y, z, 2, 1);
    c = 0;
    return (a, b, c);
}

IndexTaskMap task_1 m5_ block_block_zero; # task_1: (gx, gy, 1), always slicing to 0
IndexTaskMap task_2 m4 cyclic_zero; # task_2: (gx, 1, gz)
IndexTaskMap task_3 m4 block2_zero; # task_3: (1, gy, gz)
IndexTaskMap task_4 m5_ block_block02_zero; # task_4: (gx, gy, gz)
IndexTaskMap init_cublas m4 block_zero;
